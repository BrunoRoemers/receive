# adapted from: https://blogs.oracle.com/developers/building-cross-platform-native-images-with-graalvm

name: Build Native Images

on:
  release:
    types:
      - created
# TEMP
#  push:

defaults:
  run:
    shell: bash

jobs:
  build-native-unix:
    strategy:
      matrix:
#        os: [ubuntu-latest, macos-latest]
        os: [windows-latest]
    runs-on: ${{matrix.os}}
    env:
      IS_WINDOWS: ${{ contains(matrix.os, 'windows') }}
    steps:
    - name: 'Checkout'
      uses: actions/checkout@v2
    - name: 'Set BUILD_REF'
      run: echo "BUILD_REF=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
    - name: 'Set UPLOAD_URL'
      if: contains(github.ref, 'tags')
      run: echo "UPLOAD_URL=$(curl -s https://api.github.com/repos/BrunoRoemers/receiver/releases/tags/${{env.BUILD_REF}} | grep \"upload_url\" | grep -o "http.*}")" >> $GITHUB_ENV
    - name: 'Set ARTIFACT_NAME'
      run: echo "ARTIFACT_NAME=receiver-$BUILD_REF-${{matrix.os}}" >> $GITHUB_ENV
    - name: 'Set GU_COMMAND'
      run: echo "GU_COMMAND=${{ env.IS_WINDOWS && 'gu.cmd' || 'gu' }}" >> $GITHUB_ENV
    - name: 'Set NATIVE_IMAGE_FILE'
      run: echo "NATIVE_IMAGE_FILE=${{ env.IS_WINDOWS && 'receiver.exe' || 'receiver' }}" >> $GITHUB_ENV
    - name: 'Setup GraalVM'
      uses: DeLaGuardo/setup-graalvm@master
      with:
        graalvm-version: 20.3.0.java11
    - name: 'Install native-image'
      run: $GU_COMMAND install native-image
    - name: 'Print Info'
      run: java -version && $GU_COMMAND list -v && mvn --version && pwd
    - name: 'Build Image (unix)'
      if: ! env.IS_WINDOWS
      run: mvn --batch-mode -Pnative clean package
    - name: 'TEMP WIN'
      shell: cmd
      run: echo %JAVA_HOME%
    - name: 'Build Image (windows)'
      if: env.IS_WINDOWS
      shell: cmd
      run: call "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat" mvn --batch-mode -Pnative clean package
    - name: 'TEMP 1'
      run: ls -la . && ls -la target
    - name: 'TEMP 2'
      run: tree
    - name: 'Upload as Artifact'
      if: success()
      uses: actions/upload-artifact@v2
      with:
        name: ${{env.ARTIFACT_NAME}}
        path: target/${{env.NATIVE_IMAGE_FILE}}
    - name: 'Upload as Release Asset'
      if: success() && env.UPLOAD_URL
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        upload_url: ${{env.UPLOAD_URL}}
        asset_name: ${{env.ARTIFACT_NAME}}
        asset_path: target/${{env.NATIVE_IMAGE_FILE}}
        asset_content_type: application/octet-stream

#  build-native:
#    strategy:
#      matrix:
#        os: [macos-latest]
##        os: [ubuntu-latest, macos-latest, windows-latest]
#    runs-on: ${{matrix.os}}
#    steps:
#      - name: 'Checkout'
#        uses: actions/checkout@v2
#      - name: 'Set env'
#        run: echo "BUILD_REF=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
#      - name: 'Setup GraalVM'
#        uses: DeLaGuardo/setup-graalvm@master
#        with:
#          graalvm-version: 20.3.0.java11
#      - name: 'Install native-image'
#        run: gu install native-image
#      - name: 'Print Info'
#        run: java -version && gu list -v && mvn --version && pwd
#      - name: 'Build Image'
#        run: mvn --batch-mode -Pnative clean package
#      - name: 'Upload Artifact'
#        uses: actions/upload-artifact@v2
#        with:
#          name: receiver-${{env.BUILD_REF}}-${{matrix.os}}
#          path: target/receiver
